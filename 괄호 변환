#include <string>
#include <vector>
#include <stack>

using namespace std;

// 올바른 괄호 문자열 판단
bool isRightString(string input) {
    stack<char> s;
    int len = (int)input.length();

    for(int i = 0; i < len; i++) {
        if(input[i] == '(') {
            s.push('(');
            
        } 
        else {
            if(s.size() == 0) {
                return false;
            }
            s.pop();
        }
    }

    if(s.size() > 0)
        return false;

    return true;
}

string solution(string p) {
    string answer = "";

    // 1. 입력이 빈 문자열인 경우 빈 문자열 반환
    if(p == "")
        return "";

    // 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리
    // 단, u는 "균형잡힌 괄호 문자열"이므로 더 이상 분리할 수 없어야 하며, 
    // v는 빈 문자열이 될 수 있음
    string u, v;
    int len = (int)p.length();
    int left = 0, right = 0;
    for(int i = 0; i < len; i++) {
        if(p[i] == '(') left++;
        else if(p[i] == ')') right++;

        if(left == right) {
            u = p.substr(0, i + 1);
            v = p.substr(i + 1);
            break;
        }
    }

    // 3. 문자열 u가 "올바른 괄호 문자열" 인 경우 문자열 v에 대해 1단계부터 다시 수행하기
    if(isRightString(u)) {
        v = solution(v);
        // 3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환
        answer = u + v;
        return answer;
    }

    // 4. 문자열 u가 "올바른 괄호 문자열"이 아닌 경우
    else {
        // 4-1. 빈 문자열에 첫 번째 문자로 '(' 붙이기
        answer = "(";
        // 4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열 이어 붙이기
        answer = answer + solution(v);
        // 4-3. ')' 다시 붙이기
        answer = answer + ')';
        // 4-4. u의 첫 번째와 마지막 문자 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙이기
        u.erase(0, 1);
        u.erase(u.length() - 1, 1);
        
        for(int i = 0; i < u.length(); i++) {
            if(u[i] == '(')
                answer = answer + ')';
            else if(u[i] == ')')
                answer = answer + '(';
        }
        
        // 4-5. 생성된 문자열 반환
        return answer;
    }
}
