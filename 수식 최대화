#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iostream>

using namespace std;

long long solution(string expression) {
    long long answer = 0;
    vector<long long> num;
    vector<char> exp, loc;
    string x = "";
    
    for(int i = 0; i < expression.size(); i++) {
    	// 연산자일 경우
        if(expression[i] == '+' || expression[i] == '-' || expression[i] == '*') {
            num.push_back(stoi(x));
            x = "";
            
            // 연산자 종류 
            if(find(exp.begin(), exp.end(), expression[i]) == exp.end())
                exp.push_back(expression[i]);
            // 연산자 저장
            loc.push_back(expression[i]);
        }
        else
            x += expression[i];
    }
    
    // 마지막 숫자 저장
    num.push_back(stoi(x));
    // 정렬(next_permutation)
    sort(exp.begin(), exp.end());
    
    do {
        vector<long long> tmpNum = num;
        vector<char> tmpLoc = loc;
        
        for(int i = 0; i < exp.size(); i++) {
            for(int j = 0; j < tmpLoc.size(); j++) {
            	// i 번째 우선순위의 연산자일 경우
                if(exp[i] == tmpLoc[j]) {
                	// 계산하기
                    if(tmpLoc[j] == '+')
                        tmpNum[j] = tmpNum[j] + tmpNum[j + 1];
                    else if(tmpLoc[j] == '-')
                        tmpNum[j] = tmpNum[j] - tmpNum[j + 1];
                    else if(tmpLoc[j] == '*')
                        tmpNum[j] = tmpNum[j] * tmpNum[j + 1];
                    // 계산 후 삭제
                    tmpNum.erase(tmpNum.begin() + j + 1);
                    tmpLoc.erase(tmpLoc.begin() + j);
                    j--;
                }
            }    
        }
        
        // 최대값 갱신
        if(answer < abs(tmpNum[0]))
            answer = abs(tmpNum[0]);
    } while(next_permutation(exp.begin(), exp.end()));
    
    return answer;
}
 
