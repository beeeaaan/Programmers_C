#include <algorithm>
#include <string>
#include <vector>

using namespace std;

int solution(vector<int> mats, vector<vector<string>> park) {
    int answer = -1;
    int max_Size;
    int x = park.size();
    int y = park[0].size();
    vector<vector<int>> dp(x, vector<int>(y, 0));	// dp 테이블 생성
    
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < y; j++) {
            if (park[i][j] == "-1") {
                if (i == 0 || j == 0) {
                    dp[i][j] = 1;
                }
                
                else {
                    dp[i][j] = min({dp[i-1][j], dp[i][j-1], dp[i-1][j-1]}) + 1;
                }
                
                max_Size = max(max_Size, dp[i][j]);	// 최대값 갱신
            }
        }
    }
    
    sort(mats.rbegin(), mats.rend());
    for (int mat : mats) {
        if (mat <= max_Size) {
            answer = mat;
            break;
        }
    }
    return answer;
}
