#include <string>
#include <vector>
#include <algorithm>

using namespace std;

string solution(string new_id) {
    // 1. 대문자를 소문자로 만들기(transform)
    transform(new_id.begin(), new_id.end(), new_id.begin(), ::tolower);
    string x =  "";
    
    // 2. 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자 제거하기
    for(char c: new_id) {
        if(isalpha(c) || isdigit(c) || c == '-' || c == '_' || c == '.') {
            x += c;
        }
    }    
    new_id = x;
    x = "";
    
    // 3. 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 바꾸기
    for(char c: new_id) {
        if(c == '.' && x.back() == '.') continue;
        x += c;
    }
    new_id = x;
    x = "";
    
    // 4. 마침표(.)가 처음이나 끝에 위치하면 제거하기
    if(new_id.front() == '.') new_id.erase(0, 1);
    if(new_id.back() == '.') new_id.pop_back();
    
    // 5. 빈 문자열일 경우, new_id에 "a"를 대입하기
    if(new_id.empty()) new_id = "a";
    
    // 6-1. new_id의 길이가 16자 이상일 경우, new_id의 첫 15개의 문자를 제외한 나머지 문자들 모두 제거하기
    // 6-2. 제거 후 마침표(.)가 new_id의 끝에 위치할 경우, 끝에 위치한 마침표(.) 문자를 제거하기
    if(new_id.length() >= 16) new_id.erase(new_id.begin()+15, new_id.end());
    if(new_id.back() == '.') new_id.pop_back();
    
    // 7. new_id의 길이가 2자 이하일 경우, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙이기
    while(new_id.length() < 3) {
        new_id += new_id.back();
    }
    return new_id;
}
