#include <string>
#include <vector>
#include <algorithm>
#include <queue>
 
using namespace std;
 
int solution(const vector<string> maps) {
    int answer = -1; 
    vector<vector<int>> visit(maps.size(), vector<int>(maps[0].size(), 0));
    queue<pair<int, int>> q;    
    int sx = -1;
    int sy = -1;
    int dx[] = {1, -1, 0, 0};
    int dy[] = {0, 0, 1, -1};
    bool lever = false;
    
    // 시작점 찾기
    for(int y = 0; y < maps.size(); ++y) {   
        for(int x = 0; x < maps[0].size(); ++x) {
            if(maps[y][x] == 'S') {
                sx = x;
                sy = y;
                break;
            }
        }
        
        if(sx != -1)
            break;
    }
    
    // q에 시작점 추가
    q.push({sx, sy});

    while(!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;        
        q.pop();
        
        // 레버가 올라간 상태에서 탈출구를 만났을 경우
        if(lever && 'E' == maps[y][x] ) {
            answer = visit[y][x];
            break;
        }
        
        // 아직 레버가 올라가지 않은 상태에서 레버를 만났을 경우
        else if(!lever && 'L' == maps[y][x]) {
            lever = true;
            int time = visit[y][x];            
            q = queue<pair<int, int>>();  // q, visit 초기화
            fill(visit.begin(), visit.end(), vector(visit[0].size(), 0));      
            visit[y][x] = time;  // lever까지 걸린 시간 설정
        }
        
        // 다음 방문지 찾기
        for(int i = 0; i < 4; ++i) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            
            if(nx >= 0 && ny >= 0 && nx < maps[0].size() && ny < maps.size())
                if(maps[ny][nx] != 'X' && visit[ny][nx] == 0) {
                    q.push({nx, ny});       
                    visit[ny][nx] = visit[y][x] + 1;
            }
        }
    }
 
    return answer;
}
