#include <string>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int dX[4] = {1, 0, -1, 0};
int dY[4] = {0, 1, 0, -1};

vector<int> solution(vector<string> maps) {
    vector<int> answer;        
    int msX = maps[0].size();
    int msY = maps.size();  
    
    // 방문 확인
    vector<vector<bool>> visit(msY, vector<bool>(msX, 0));    
    // Position값 저장
    queue<pair<int, int>> qPair;
    
    for(int i = 0; i < msY; ++i) {
        for(int j = 0; j < msX; ++j) {
            // 탐색x 예외 처리
            if(maps[i][j] == 'X' || visit[i][j] == true)
                continue;
            
            // 갈 수 있는 위치이므로 q에 위치 저장
            qPair.push({i, j});            
            visit[i][j] = true;
            
            int AddRange = 0;
            
            AddRange += maps[i][j] - '0';
            
            // 인접한 위치 전부 탐색
            while(!qPair.empty()) {
                pair<int, int> cur = qPair.front();               
                qPair.pop();
                
                // 방향 탐색
                for(int dir = 0; dir < 4; ++dir) {
                    // 다음 탐색 위치
                    int neX = cur.second + dX[dir];
                    int neY = cur.first + dY[dir];
                    
                    // 갈 수 없는지 확인 예외처리
                    if(neX < 0 || neY < 0 || neX >= msX || neY >= msY)
                        continue;
                    
                    if(maps[neY][neX] == 'X' || visit[neY][neX] == 1)
                        continue;
                    
                    // 예외처리 지났으니 갈 수 있는 곳
                    qPair.push({neY, neX});
                    visit[neY][neX] = true;
                    AddRange += maps[neY][neX] - '0';
                }
            }
            
            answer.push_back(AddRange);
        }
    }
    
    if(answer.size() == 0) {
        answer.push_back(-1);
        
        return answer;
    }
    
    sort(answer.begin(), answer.end());
    
    return answer;
}
