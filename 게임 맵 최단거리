#include<vector>
#include<bits/stdc++.h>
using namespace std;

int dy[] = {-1, 0, 1, 0}; // y좌표 변화량
int dx[] = {0, 1, 0, -1}; // x좌표 변화량

int BFS(vector<vector<int>> &maps) {
    queue<pair<int,int>> que;
    int n = maps.size();  // 행 크기
    int m = maps[0].size(); // 열 크기
    vector<vector<int>> table(n, vector<int>(m, 0));
    que.push({0,0});
    table[0][0] = 1;

    while(que.size()){
        pair<int,int> cur = que.front();
        que.pop();
        
        // 상, 우, 하, 좌 방향
        for(int i = 0; i < 4; i++) {
            int ny = cur.first + dy[i];
            int nx = cur.second + dx[i];
            
            // 맵 범위 벗어나거나, 벽을 만나거나, 이미 방문했을 경우
            if(ny < 0 || nx < 0 || ny >= n || nx >= m || maps[ny][nx] == 0 || table[ny][nx]) 
                continue;
            
            // 거리 업데이트 및 새 위치 큐 삽입
            table[ny][nx] = table[cur.first][cur.second] + 1;
            que.push({ny,nx});
        }            
    }
    
    // 목표 지점에 도달한 경우 거리 반환하고 아닌 경우 -1 반환
    return table[n - 1][m - 1] > 0 ? table[n - 1][m - 1] : -1;
}

int solution(vector<vector<int> > maps) {
    int answer = BFS(maps);
    
    return answer;
}
